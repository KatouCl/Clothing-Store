// <auto-generated />
using System;
using KS.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KS.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4235577d-a6a5-4f54-bc4b-cbd754c2aece",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7MEHrKfGTNBFdN1kVemrH17c4SOTVVb/qNC548QLPvOz1tdTO2AaB+ihxwkclbtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("KS.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(4894),
                            Description = "Nike",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5023),
                            Description = "Adidas",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5031),
                            Description = "Polo",
                            Name = "Polo"
                        },
                        new
                        {
                            Id = 4L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5037),
                            Description = "Balmain",
                            Name = "Balmain"
                        },
                        new
                        {
                            Id = 5L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5041),
                            Description = "Bottega Veneta",
                            Name = "Bottega Veneta"
                        },
                        new
                        {
                            Id = 6L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5046),
                            Description = "Brunello Cucinelli",
                            Name = "Brunello Cucinelli"
                        },
                        new
                        {
                            Id = 7L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5050),
                            Description = "Jil Sander",
                            Name = "Jil Sander"
                        },
                        new
                        {
                            Id = 8L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5055),
                            Description = "Gucci",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 9L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5063),
                            Description = "Ralph Lauren",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 10L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5068),
                            Description = "Alexander McQueen",
                            Name = "Alexander McQueen"
                        },
                        new
                        {
                            Id = 11L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5072),
                            Description = "Prada",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 12L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5079),
                            Description = "Off-White",
                            Name = "Off-White"
                        },
                        new
                        {
                            Id = 13L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 135, DateTimeKind.Local).AddTicks(5087),
                            Description = "Versace",
                            Name = "Versace"
                        });
                });

            modelBuilder.Entity("KS.Entities.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("KS.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8212),
                            Name = "Блуза",
                            Slug = "Блуза"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8227),
                            Name = "Рубашка",
                            Slug = "Рубашка"
                        },
                        new
                        {
                            Id = 3L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8231),
                            Name = "Брюки",
                            Slug = "Брюки"
                        },
                        new
                        {
                            Id = 4L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8235),
                            Name = "Бриджи",
                            Slug = "Бриджи"
                        },
                        new
                        {
                            Id = 5L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8238),
                            Name = "Лосины",
                            Slug = "Лосины"
                        },
                        new
                        {
                            Id = 6L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8242),
                            Name = "Джинсы",
                            Slug = "Джинсы"
                        },
                        new
                        {
                            Id = 7L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8245),
                            Name = "Шорты",
                            Slug = "Шорты"
                        },
                        new
                        {
                            Id = 8L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8250),
                            Name = "Юбка",
                            Slug = "Юбка"
                        },
                        new
                        {
                            Id = 9L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8254),
                            Name = "Комбинезон",
                            Slug = "Комбинезон"
                        },
                        new
                        {
                            Id = 10L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8257),
                            Name = "Джемпер",
                            Slug = "Джемпер"
                        },
                        new
                        {
                            Id = 11L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8261),
                            Name = "Свитер",
                            Slug = "Свитер"
                        },
                        new
                        {
                            Id = 12L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8266),
                            Name = "Гольф",
                            Slug = "Гольф"
                        },
                        new
                        {
                            Id = 13L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8269),
                            Name = "Пуловер",
                            Slug = "Пуловер"
                        },
                        new
                        {
                            Id = 14L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8273),
                            Name = "Кофта",
                            Slug = "Кофта"
                        },
                        new
                        {
                            Id = 15L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8276),
                            Name = "Кардиган",
                            Slug = "Кардиган"
                        },
                        new
                        {
                            Id = 16L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8279),
                            Name = "Жакет",
                            Slug = "Жакет"
                        },
                        new
                        {
                            Id = 17L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8283),
                            Name = "Пиджак",
                            Slug = "Пиджак"
                        },
                        new
                        {
                            Id = 18L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8286),
                            Name = "Футболка",
                            Slug = "Футболка"
                        },
                        new
                        {
                            Id = 19L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8290),
                            Name = "Майка",
                            Slug = "Майка"
                        },
                        new
                        {
                            Id = 20L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8293),
                            Name = "Поло",
                            Slug = "Поло"
                        },
                        new
                        {
                            Id = 21L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8297),
                            Name = "Футболка с длинным рукавом",
                            Slug = "Футболка с длинным рукавом"
                        },
                        new
                        {
                            Id = 22L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8300),
                            Name = "Тенниска",
                            Slug = "Тенниска"
                        },
                        new
                        {
                            Id = 23L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8303),
                            Name = "Реглан",
                            Slug = "Реглан"
                        },
                        new
                        {
                            Id = 24L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8307),
                            Name = "Платье",
                            Slug = "Платье"
                        },
                        new
                        {
                            Id = 25L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(8310),
                            Name = "Ветровка",
                            Slug = "Ветровка"
                        });
                });

            modelBuilder.Entity("KS.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Context = "<p>KataStore &ndash; крупнейший&nbsp;department store&nbsp;в Европе. На площади 70 тысяч квадратных метров расположились коллекции более двух тысяч брендов. Среди них &ndash; Dolce&amp;Gabbana, Valentino, Celine, Ralph Lauren, Alexander McQueen, Brioni, Loro Piana, Chopard, Rolex, Graff, Garrard, Patek Philippe. Своим клиентам KataStore предоставляет безупречный сервис и возможность совершать покупки по европейским ценам, не выезжая за пределы Москвы &ndash; с начала 2016 года цены в универмаге приравнены к миланским.</p>",
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 139, DateTimeKind.Local).AddTicks(4278),
                            Number = "<table border='0' cellpadding='0' cellspacing='0' style='width:500px'><tbody><tr><td>KataStore:<br /><a href='tel:+78005008000'>+7 800 500 80 00</a></td><td>Интернет-магазин:<br /><a href='tel:+7 800 500 73 21'>+7 800 500 73 21</a></td></tr><tr><td><a href='tel:+74959337300'>+7 (495) 933 73 00</a></td><td><a href='tel:+7 495 933 73 21'>+7 495 933 73 21</a></td></tr></tbody></table><p>&nbsp;</p>",
                            Place = "<table border='0' cellpadding='0' cellspacing='0' style='width:500px'><tbody><tr><td><p>г. Москва, ул.&nbsp;Петровка,&nbsp;д.&nbsp;2,</p><p>&nbsp;пункт выдачи заказов&nbsp;на 1 и 5 этажах</p></td><td><p>Ежедневно на 1 этаже с 10:00 до 24:00,</p><p>Ежедневно на 5 этаже с 11:00 до 23:00</p></td></tr></tbody></table><p>&nbsp;</p>",
                            Title = "<h1>Контакты</h1>"
                        });
                });

            modelBuilder.Entity("KS.Entities.Delivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DeliveryType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("KS.Entities.FeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("KS.Entities.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<byte>("MediaType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("KS.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DeliveryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KS.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("KS.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("GenderType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowToOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCallForPricing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("SpecialPriceEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("SpecialPriceStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("StockTrackingIsEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("TaxClassId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("TaxClassId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("KS.Entities.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("KS.Entities.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("KS.Entities.TaxClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxClasses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 140, DateTimeKind.Local).AddTicks(1522),
                            Interest = 0m,
                            Name = "0%"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 140, DateTimeKind.Local).AddTicks(1582),
                            Interest = 10m,
                            Name = "10%"
                        },
                        new
                        {
                            Id = 3L,
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 140, DateTimeKind.Local).AddTicks(1588),
                            Interest = 18m,
                            Name = "18%"
                        });
                });

            modelBuilder.Entity("KS.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "г. Белебей, ул. Красноармейская 125",
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 140, DateTimeKind.Local).AddTicks(5231),
                            Name = "Основной",
                            Vendor = "452000"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "г. Уфа, ул. Советская 25",
                            CreationDate = new DateTime(2021, 6, 20, 21, 3, 13, 140, DateTimeKind.Local).AddTicks(5248),
                            Name = "Основной (запасной)",
                            Vendor = "450000"
                        });
                });

            modelBuilder.Entity("KS.Entities.WishList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KS.Entities.CartItem", b =>
                {
                    b.HasOne("KS.Entities.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KS.Entities.Order", b =>
                {
                    b.HasOne("KS.Entities.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KS.Entities.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId");

                    b.Navigation("Customer");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("KS.Entities.OrderItem", b =>
                {
                    b.HasOne("KS.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("KS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KS.Entities.Product", b =>
                {
                    b.HasOne("KS.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("KS.Entities.TaxClass", "TaxClass")
                        .WithMany()
                        .HasForeignKey("TaxClassId");

                    b.Navigation("Brand");

                    b.Navigation("TaxClass");
                });

            modelBuilder.Entity("KS.Entities.ProductCategory", b =>
                {
                    b.HasOne("KS.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KS.Entities.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KS.Entities.Stock", b =>
                {
                    b.HasOne("KS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KS.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("KS.Entities.WishList", b =>
                {
                    b.HasOne("KS.Entities.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("KS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KS.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KS.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KS.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KS.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KS.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KS.Entities.Product", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
